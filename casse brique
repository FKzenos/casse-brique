import pygame
import sys

# Initialisation de Pygame
pygame.init()

# Définition des couleurs
BLANC = (255, 255, 255)
NOIR = (0, 0, 0)
ROUGE = (255, 0, 0)
VERT = (0, 255, 0)
BLEU = (0, 0, 255)
JAUNE_OR = (255, 199, 38)

# Paramètres du jeu
largeur_fenetre = 544
hauteur_fenetre = 600
taille_raquette = 1000
hauteur_raquette = 10
taille_brique = 50
hauteur_brique = 20
balle_rayon = 10
balle_couleur = ROUGE

# balle
class Balle(pygame.sprite.Sprite):
    def __init__(self, x, y, rayon, couleur):
        super().__init__()
        self.image = pygame.Surface((rayon * 2, rayon * 2), pygame.SRCALPHA)
        pygame.draw.circle(self.image, couleur, (rayon, rayon),rayon)
        self.rect = self.image.get_rect(center=(x, y))
        self.vitesse_x = -5
        self.vitesse_y = 5

    def update(self):
        self.rect.x += self.vitesse_x
        self.rect.y += self.vitesse_y

        if self.rect.left <= 0 or self.rect.right >= largeur_fenetre:
            self.vitesse_x = -self.vitesse_x
        if self.rect.top <= 0:
            self.vitesse_y = -self.vitesse_y

# raquette
class Raquette(pygame.sprite.Sprite):
    def __init__(self, x, y, largeur, hauteur, couleur):
        super().__init__()
        self.image = pygame.Surface((largeur, hauteur))
        self.image.fill(couleur)
        self.rect = self.image.get_rect(topleft=(x, y))

    def update(self, keys, largeur_fenetre):
        if keys[pygame.K_LEFT] and self.rect.left > 0:
            self.rect.x -= 5
        if keys[pygame.K_RIGHT] and self.rect.right < largeur_fenetre:
            self.rect.x += 5

class Brique(pygame.sprite.Sprite):
    def __init__(self, x, y, pv, couleur):
        super().__init__()
        self.pv = pv
        self.couleur = couleur
        self.image = pygame.Surface((taille_brique, hauteur_brique))  # Taille de la brique
        self.image.fill(self.couleur)
        self.rect = self.image.get_rect(topleft=(x, y))
        self.contour_vert = False  # Indicateur pour dessiner le contour vert

    def update(self):

        if self.pv == 1:
            self.contour_vert = True
        else:
            self.contour_vert = False

    def dessiner_contour(self):
        if self.contour_vert:
            pygame.draw.rect(self.image, VERT, self.image.get_rect(), 10)


# Initialisation de la fenêtre
fenetre = pygame.display.set_mode((largeur_fenetre, hauteur_fenetre))
pygame.display.set_caption("Casse-Brique")

# Définition de la barre tout en bas de la fenêtre
loseEvent = pygame.Rect(0, hauteur_fenetre - 5, largeur_fenetre, 5)

# Liste de briques
briques = []

# Ajout de briques
nombre_briques_ligne = 10
nombre_lignes_briques = 1
espace_entre_briques = 5

for ligne in range(nombre_lignes_briques):
    for colonne in range(nombre_briques_ligne):
        x = colonne * (taille_brique + espace_entre_briques)
        y = ligne * (hauteur_brique + espace_entre_briques)
        pv = 2 if ligne == 0 else 1
        brique = Brique(x, y, pv, VERT)
        if pv == 2:
            brique = Brique(x,y,pv,JAUNE_OR)
        briques.append(brique)

for brique in briques:
    brique.dessiner_contour()


# Création de la balle
balle = Balle(largeur_fenetre // 2, hauteur_fenetre // 2, balle_rayon, balle_couleur)

# Création de la raquette
raquette = Raquette((largeur_fenetre - taille_raquette) // 2, hauteur_fenetre - hauteur_raquette - 20,
                        taille_raquette, hauteur_raquette, BLEU)

# Police pour l'affichage du texte
font = pygame.font.SysFont(None, 80)

# Boucle principale du jeu
running = True
while running:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False
    balle_temporisation = 0


    keys = pygame.key.get_pressed()

    # Mise à jour de la raquette
    raquette.update(keys, largeur_fenetre)

    # Gestion de la collision avec la raquette
    if balle.rect.colliderect(raquette.rect):
        balle.vitesse_y = -balle.vitesse_y

    # Gestion de la collision avec le fond
    if balle.rect.colliderect(loseEvent):
        pygame.draw.rect(fenetre, NOIR, (0, 0, largeur_fenetre, hauteur_fenetre))
        text = font.render("Game Over", True, ROUGE)
        fenetre.blit(text, (largeur_fenetre // 2 - text.get_width() // 2, hauteur_fenetre // 2 - text.get_height() // 2))
        pygame.display.flip()
        pygame.time.delay(2000)
        pygame.quit()
        sys.exit()

    if len(briques) == 0:
        pygame.draw.rect(fenetre, NOIR, (0, 0, largeur_fenetre, hauteur_fenetre))
        text = font.render("Victory", True, JAUNE_OR)
        fenetre.blit(text,
                     (largeur_fenetre // 2 - text.get_width() // 2, hauteur_fenetre // 2 - text.get_height() // 2))
        pygame.display.flip()
        pygame.time.delay(2000)
        pygame.quit()
        sys.exit()

    # Gestion des collisions avec les briques
    for brique in briques[:]:
        if balle.rect.colliderect(brique.rect):
            if balle_temporisation <= 0:  # Vérifie si la temporisation est écoulée
                brique.pv -= 1
                balle.vitesse_y = -balle.vitesse_y

                if brique.pv == 0:
                    briques.remove(brique)

                balle_temporisation = 0.2 * 60
    if balle_temporisation > 0:
        balle_temporisation -= 1

 # Dessin de l'arrière-plan
    fenetre.fill(BLANC)

    # Mise à jour de la balle
    balle.update()

    # Dessin de la raquette
    fenetre.blit(raquette.image, raquette.rect)

    # Dessin de la balle
    fenetre.blit(balle.image, balle.rect)

    # Dessin de la barre tout en bas
    pygame.draw.rect(fenetre, NOIR, loseEvent)

    # Dessin des briques
    for brique in briques:
        fenetre.blit(brique.image, brique.rect)

    # Mise à jour de l'affichage
    pygame.display.flip()

    # Limiter la vitesse de la boucle
    pygame.time.Clock().tick(300)

pygame.quit()
sys.exit()
